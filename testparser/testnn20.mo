model testnn20
// Wi Bi correspondent aux poids et biais de la couche i la fonction d'activation est ReLU à chaque étape
Real[20] A, C;
Real[2] D;
Real[200, 2] E;
Real[200] theta, thetap;
parameter Real[2] condinit = {2, 0};
parameter Real[20] B1 = {-0.4602, -0.4413,  0.4005,  0.8488, -0.5993,  0.7098, -0.2644, -0.4059,
         0.8605,  1.1671, -0.2138,  1.0720, -0.6766,  0.8125, -0.3041,  0.4765,
         0.5190, -0.6637,  0.7556,  0.9249};
parameter Real[20] B2 = {-0.1407,  0.2314,  0.1086, -0.1710,  0.2744, -0.1817,  0.2129, -0.0654,
         0.2940, -0.2213, -0.0687,  0.4370,  0.0295,  0.0142,  0.1988, -0.1555,
        -0.1435,  0.0796, -0.1503, -0.1604};
parameter Real[2] B3 = {-0.1414, -0.2201};
parameter Real[20,2] W1 = {{-0.0513,  0.0376},
        { 0.0106, -0.0169},
        {-0.4943,  0.0222},
        {-0.2784,  0.2887},
        { 0.0832,  0.0306},
        {-0.4272, -0.0544},
        { 0.0227,  0.0897},
        { 0.0234, -0.0196},
        {-0.2734,  0.3103},
        {-0.4259, -0.2722},
        { 0.0503, -0.0260},
        {-0.3552, -0.3692},
        { 0.0870, -0.0273},
        { 0.2440, -0.1435},
        {-0.0149,  0.0216},
        { 0.1033, -0.3231},
        { 0.0179, -0.3684},
        {-0.6222,  0.0185},
        {-0.4181, -0.1094},
        {-0.1269,  0.3270}};
parameter Real[20,20] W2= {{ 5.1915e-03, -5.6585e-03,  4.8376e-02,  2.1200e-02,  7.3926e-03,
         -2.2343e-02,  9.4297e-03,  7.9610e-02, -6.2072e-02,  7.5081e-02,
          4.2003e-02, -6.4055e-02,  1.4605e-02,  4.8373e-02, -2.2024e-02,
         -2.9506e-05, -3.9219e-02, -7.7331e-02, -6.2033e-02,  2.0218e-02},
        {-1.7284e-02, -9.8091e-04,  2.8550e-01, -1.3333e-01, -3.8055e-02,
          2.8628e-01, -9.4236e-02, -8.6341e-03, -1.6164e-01,  3.1696e-01,
          1.1140e-03,  1.6000e-01,  1.1019e-02,  5.1211e-02,  2.7362e-02,
          1.7538e-01,  1.9761e-01, -3.4517e-01,  2.9800e-01, -1.3635e-01},
        {-1.3691e-02,  4.9108e-03,  3.8691e-01,  2.1324e-01,  2.2890e-02,
          2.7087e-01, -8.5349e-02, -2.4253e-02, -5.5609e-02,  2.6953e-01,
          2.1062e-02,  1.9266e-01, -3.3835e-02, -1.3870e-01, -9.5025e-03,
         -7.7884e-02, -6.8361e-02, -6.9454e-01,  3.1433e-01, -4.3190e-02},
        {-1.6577e-02,  6.4099e-02, -8.0753e-02, -4.9096e-03,  1.4291e-02,
         -7.2223e-02,  6.2209e-02,  1.0073e-02, -3.9682e-02,  1.4044e-02,
          3.6690e-02, -1.9362e-02,  5.8039e-02,  3.9640e-02,  5.3821e-02,
          3.9800e-02, -2.5266e-02,  6.8829e-02,  3.6963e-02,  4.8742e-03},
        {-2.4405e-02, -1.7045e-02, -4.3839e-02,  3.7795e-01,  2.8535e-03,
          1.3359e-01,  1.3342e-02, -3.7343e-02,  3.5634e-01,  1.6869e-01,
         -8.4732e-02, -4.8077e-02,  4.0518e-02, -6.8560e-02,  2.2811e-02,
         -1.7115e-01, -2.2534e-01, -2.0142e-01,  9.4193e-02,  4.2707e-01},
        { 2.2788e-02, -2.2313e-02,  2.0721e-02, -1.5425e-02,  6.6671e-02,
         -9.9169e-03,  3.3318e-02, -7.7497e-02, -5.3482e-02,  7.3234e-02,
         -1.3778e-02,  1.4332e-02, -5.5057e-02,  3.2886e-02,  5.6411e-02,
         -6.6354e-02,  1.5182e-02,  2.3904e-03,  4.6698e-03, -7.7985e-02},
        {-1.2009e-01, -4.7948e-02, -3.9590e-01,  1.0797e-01,  2.3118e-02,
         -1.7506e-01, -2.1537e-02, -5.4903e-02,  2.0109e-01,  6.1442e-01,
          6.9154e-02,  8.1590e-01,  5.2139e-02,  3.6393e-02,  2.1031e-02,
          1.6177e-01,  2.7469e-01,  8.1167e-01, -9.4136e-02,  6.2357e-03},
        {-2.4773e-03, -6.8424e-02,  2.1599e-02, -1.6330e-02, -1.1190e-01,
         -9.9553e-02,  2.6897e-02, -5.3261e-02, -3.1649e-03, -1.4732e-02,
         -1.1242e-02, -1.4803e-02, -4.2706e-02,  1.4954e-02,  7.9187e-03,
          1.1084e-02, -4.3702e-02, -3.5038e-02,  4.6085e-02,  2.2766e-02},
        {-2.7233e-02,  3.5671e-02, -3.9209e-01,  3.9479e-01, -3.3558e-02,
         -7.8492e-02,  2.4268e-02, -2.5904e-02,  3.9076e-01,  2.2142e-01,
          6.7409e-02,  1.5126e-01, -7.5357e-02, -1.6696e-01, -9.3478e-02,
         -1.8793e-01, -2.0884e-01,  3.3903e-01,  9.2225e-02,  3.4387e-01},
        {-1.5231e-02,  1.8564e-02, -1.8674e-03, -1.1324e-01,  5.3612e-02,
          1.1081e-02, -5.4199e-02, -2.2403e-02, -8.0179e-03, -2.5447e-03,
          3.9075e-03,  3.3239e-02,  2.8721e-02,  6.2460e-02, -5.3481e-02,
         -2.1590e-03, -4.8621e-02, -5.2237e-02,  7.4605e-02,  2.6815e-02},
        {-4.3124e-03, -2.8125e-02, -4.9387e-03, -6.2353e-02, -4.2857e-03,
         -7.8211e-03,  2.1568e-02,  6.5702e-02, -2.9147e-02, -4.3099e-02,
          4.3443e-02,  2.2527e-02, -3.2495e-02, -5.5146e-02, -2.7812e-02,
         -7.9628e-02, -8.8113e-02,  6.5934e-02, -2.8360e-02, -3.4468e-02},
        {-1.7424e-02,  6.2832e-02, -3.8316e-01,  4.6995e-01,  4.2465e-02,
         -3.5901e-01, -2.8527e-02, -3.8766e-02,  3.9622e-01, -2.8043e-01,
          1.3441e-02, -1.6601e-01, -5.7764e-02,  2.9777e-01, -1.7176e-02,
          2.4590e-01,  2.0280e-02,  6.1151e-01, -2.3076e-01,  4.0159e-01},
        {-3.4195e-02, -8.1271e-03,  4.1523e-01,  2.2382e-01,  1.8559e-02,
          3.3106e-01,  7.6742e-02,  1.0328e-02,  8.9633e-02,  2.8949e-01,
         -1.8648e-02,  2.3978e-01,  3.8457e-02, -3.6733e-01, -5.5875e-02,
         -1.9325e-01, -1.3090e-01, -8.1295e-01,  3.9419e-01, -1.1424e-01},
        {-3.4092e-04, -3.1276e-02, -1.5936e-02,  3.4545e-02, -1.2936e-02,
          1.7783e-02, -2.7178e-02,  1.3269e-02,  7.7134e-03, -4.7358e-02,
         -1.1452e-02, -1.1317e-01,  1.4331e-02,  6.6915e-02, -3.8514e-02,
         -5.0999e-02, -4.2251e-02,  6.3373e-02,  4.3655e-02, -9.5926e-02},
        {-1.1174e-01,  1.6792e-02,  2.5895e-01, -1.6154e-01, -2.4086e-02,
          2.7866e-01, -1.9344e-02,  7.8116e-02, -1.4551e-01,  2.4921e-01,
         -9.1625e-02,  2.6375e-01, -6.8537e-02,  2.6418e-01,  2.2012e-02,
          1.7643e-01,  2.3426e-01, -4.3627e-01,  3.1239e-01, -1.5383e-01},
        {-4.0383e-02,  2.3719e-02,  3.6597e-01,  1.6493e-01,  1.1169e-02,
          3.1589e-01,  2.6962e-03,  5.2825e-02,  1.5664e-01,  2.9195e-01,
          5.6042e-02,  3.8791e-02, -2.0489e-02, -2.0652e-01,  9.1819e-02,
         -1.7387e-01, -1.3039e-01, -7.7280e-01,  4.2575e-01, -5.6393e-02},
        {-2.2040e-02, -6.9049e-02,  1.4498e-02, -2.2697e-02,  1.0211e-01,
          1.5596e-03,  4.2334e-02,  1.0025e-02,  2.5129e-02, -5.7917e-03,
         -1.8646e-02, -6.6172e-02, -7.0609e-02, -1.5946e-02, -8.4099e-03,
          7.8143e-02, -8.2388e-03,  3.9510e-02,  1.0599e-02,  5.6132e-02},
        { 7.7212e-03,  8.5359e-02,  4.8352e-01,  2.6528e-01,  2.6116e-02,
          2.2412e-01, -9.7819e-03, -1.0270e-04,  9.9090e-02,  3.5794e-01,
         -6.9442e-02,  2.3795e-01,  1.1898e-02, -1.9501e-01, -3.5198e-02,
         -1.4425e-01, -3.4977e-02, -6.8375e-01,  3.3793e-01, -8.2982e-02},
        { 4.9730e-02,  5.0453e-02,  2.3976e-02,  6.4526e-03, -1.5821e-02,
          6.6678e-02,  2.2252e-03, -5.7333e-03, -4.5630e-04, -3.7148e-02,
          1.8756e-02,  1.8281e-02, -5.5690e-02,  2.0346e-02,  6.3196e-02,
          9.1690e-02, -9.2749e-02, -2.4793e-02, -9.1160e-03, -4.8460e-02},
        {-6.3793e-02,  7.2254e-02,  5.3163e-02, -5.4479e-02, -4.3154e-02,
          6.1717e-02,  6.0772e-02, -5.7840e-02, -4.3032e-02, -3.8357e-02,
         -1.7717e-03, -7.5176e-02, -3.2379e-03,  3.2967e-03, -8.9927e-03,
         -2.5403e-02,  2.8855e-02,  1.1881e-02, -2.7504e-02,  2.7396e-02}};
parameter Real[2, 20] W3 ={{0.0757, -0.4034,  0.1604,  0.0659,  0.2641, -0.0466, -0.3713,  0.0141,
          0.2652, -0.0919, -0.0103,  0.5547,  0.1302,  0.0724, -0.3096,  0.1965,
          0.0235,  0.1033, -0.0387, -0.0408},
        {-0.0070,  0.1964,  0.3180,  0.0693, -0.1729,  0.0118, -0.5490,  0.0512,
         -0.3037, -0.0559, -0.0428, -0.1242,  0.3347, -0.0725,  0.1786,  0.2813,
         -0.0772,  0.4476, -0.0016, -0.0416}};     
algorithm
    A := W1*condinit+B1;
    for i in 1:size(A,1) loop
        A[i] := max(0,A[i]);
    end for;
    C := W2*A+B2;
    for i in 1:size(C,1) loop
        C[i] := max(0,C[i]);
    end for;
    D := W3*C+B3;
    E[1] := condinit +0.1*D;
    for i in 2:size(E,1) loop
      A := W1*E[i-1]+B1;
      for j in 1:size(A,1) loop
          A[j] := max(0,A[j]);
      end for;
      C := W2*A+B2;
      for j in 1:size(C,1) loop
          C[j] := max(0,C[j]);
      end for;
      D := W3*C+B3;
      E[i] := E[i-1] +0.1*D;
    end for;
    for i in 1:size(E,1) loop
       theta[i] := E[i, 1];
       thetap[i] := E[i, 2];
    end for;
         
end testnn20;
